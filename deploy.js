const Web3 = require('web3');
let term = require( 'terminal-kit').terminal ;
const fs = require('fs');
var figlet = require('figlet');
const chalkAnimation = require('chalk-animation');
const inquirer = require('inquirer');


let web3;
let routerAddr;
let current;
let publicKey;

async function init(){

    await fs.readFile('./userData.json' , (err, data) => {
        if(err){
            console.log(err);
        } else {
            let userData = JSON.parse(data);
            web3 = new Web3(new Web3.providers.HttpProvider(userData.httpProviderUrl));
            user_wallet = userData.PublicKey;
            let privateKey = userData.PrivateKey;
            web3.eth.accounts.wallet.add(privateKey);
            routerAddr = userData.RouterAddress;
            current = userData.TitanSmartContract;
        }
    });
    
    return new Promise(resolve=>{
        setTimeout(resolve,1000)
    })

}



async function deploy() {
    console.clear();

    let ani = chalkAnimation.rainbow('Deploying a new Titan Contract...\n');


   var sniperContract = new web3.eth.Contract([
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "MainRouter",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "buyWith",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "slippage",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "routerAddr",
				"type": "address"
			}
		],
		"name": "BUY",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "routerAddress",
				"type": "address"
			}
		],
		"name": "HoneyPot",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "sellTo",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "slippage",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "routerAddr",
				"type": "address"
			}
		],
		"name": "SELL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "sellTo",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "slippage",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "routerAddr",
				"type": "address"
			}
		],
		"name": "SELLAMOUNT",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "WETH",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getOutBNB",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "takeOutTokens",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
])


    var sniper = sniperContract.deploy({
        data: '0x60806040523480156200001157600080fd5b5060405162001b7d38038062001b7d8339810160408190526200003491620000e9565b600080546001600160a01b03191633179055604080516315ab88c960e31b815290516001600160a01b0383169163ad5c4648916004808301926020929190829003018186803b1580156200008757600080fd5b505afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c29190620000e9565b600180546001600160a01b0319166001600160a01b03929092169190911790555062000119565b600060208284031215620000fb578081fd5b81516001600160a01b038116811462000112578182fd5b9392505050565b611a5480620001296000396000f3fe60806040526004361061007f5760003560e01c80638da5cb5b1161004e5780638da5cb5b14610153578063ad5c464814610175578063db9c39ee1461018a578063e9276255146101aa576100c1565b806318b8c67b146100c65780634bc4cb28146100e85780635b9d44df14610108578063621da7ec1461011d576100c1565b366100c157600080546040516001600160a01b03909116913480156108fc02929091818181858888f193505050501580156100be573d6000803e3d6000fd5b50005b600080fd5b3480156100d257600080fd5b506100e66100e1366004611683565b6101ca565b005b3480156100f457600080fd5b506100e6610103366004611683565b6106f4565b34801561011457600080fd5b506100e6610ab4565b34801561012957600080fd5b5061013d610138366004611702565b610afa565b60405161014a91906118a6565b60405180910390f35b34801561015f57600080fd5b5061016861120d565b60405161014a9190611879565b34801561018157600080fd5b5061016861121c565b34801561019657600080fd5b506100e66101a5366004611683565b61122b565b3480156101b657600080fd5b506100e66101c53660046116d9565b61139f565b6000546001600160a01b031633146101e157600080fd5b604080516002808252606082018352600092602083019080368337019050509050848160008151811061022457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061026657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517fd06ca61f00000000000000000000000000000000000000000000000000000000815283916000919083169063d06ca61f906102c19089908790600401611921565b60006040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610333919081019061173d565b60018151811061035357634e487b7160e01b600052603260045260246000fd5b602002602001015190506064818661036b919061199e565b610375919061197e565b945061038185826119db565b94506000886001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103b19190611879565b60206040518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610401919061181e565b90506000886001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104319190611879565b60206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610481919061181e565b90508781101561060e57604080516002808252606082018352600092602083019080368337505060015482519293506001600160a01b0316918391506000906104da57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050898160018151811061051c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526000908616631f00ca74610546858d6119db565b846040518363ffffffff1660e01b8152600401610564929190611921565b60006040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105d6919081019061173d565b6000815181106105f657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061060b82828a611496565b50505b610619858988611496565b6000828b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106489190611879565b60206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610698919061181e565b6106a291906119db565b9050878110156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906118ea565b60405180910390fd5b5050505050505050505050565b6000546001600160a01b0316331461070b57600080fd5b600060025b604051908082528060200260200182016040528015610739578160200160208202803683370190505b509050858160008151811061075e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106107a057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517fd06ca61f00000000000000000000000000000000000000000000000000000000815283916000919083169063d06ca61f906107fb9089908790600401611921565b60006040518083038186803b15801561081357600080fd5b505afa158015610827573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261086d919081019061173d565b60018151811061088d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050606481866108a5919061199e565b6108af919061197e565b94506108bb85826119db565b94506000876001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108eb9190611879565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b919061181e565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081529091506001600160a01b038a169063095ea7b3906109859088908b9060040161188d565b602060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d791906117f7565b506109e3848887611496565b600081896001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610a129190611879565b60206040518083038186803b158015610a2a57600080fd5b505afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a62919061181e565b610a6c91906119db565b905086811015610aa8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906118ea565b50505050505050505050565b6000546001600160a01b03163314610acb57600080fd5b60405133904780156108fc02916000818181858888f19350505050158015610af7573d6000803e3d6000fd5b50565b6000546060906001600160a01b03163314610b1457600080fd5b604080516002808252606082018352600092602083019080368337505060015482519293506001600160a01b031691839150600090610b6357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610ba557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517fd06ca61f00000000000000000000000000000000000000000000000000000000815284916000919083169063d06ca61f90610c009089908790600401611921565b60006040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c72919081019061173d565b600181518110610c9257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000876001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cca9190611879565b60206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a919061181e565b9050610d27848888611496565b600081896001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d569190611879565b60206040518083038186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da6919061181e565b610db091906119db565b610dba90846119db565b9050600083610dcb836103e861199e565b610dd5919061197e565b60408051600280825260608201835292935060009290916020830190803683370190505090508a81600081518110610e1d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001805483519216918391908110610e5b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f70a082310000000000000000000000000000000000000000000000000000000081526000918881169163d06ca61f918f16906370a0823190610ebb903090600401611879565b60206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b919061181e565b846040518363ffffffff1660e01b8152600401610f29929190611921565b60006040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f9b919081019061173d565b600181518110610fbb57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008c6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610ff39190611879565b60206040518083038186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611043919061181e565b90506110cb838e6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110759190611879565b60206040518083038186803b15801561108d57600080fd5b505afa1580156110a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c5919061181e565b8d611496565b6000818e6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110fa9190611879565b60206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a919061181e565b611154908a6119db565b61115e91906119db565b905060008361116f836103e861199e565b611179919061197e565b604080516002808252606082018352929350600092909160208301908036833701905050905086816000815181106111c157634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081816001815181106111ef57634e487b7160e01b600052603260045260246000fd5b60209081029190910101529f9e505050505050505050505050505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6000546001600160a01b0316331461124257600080fd5b826112e3576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038616906370a082319061128c903090600401611879565b60206040518083038186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc919061181e565b925061070b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038716906370a082319061132b903090600401611879565b60206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b919061181e565b90506064611389858361199e565b611393919061197e565b93505060006002610710565b6000546001600160a01b031633146113b657600080fd5b6001600160a01b0382166113f757604051339082156108fc029083906000818181858888f193505050501580156113f1573d6000803e3d6000fd5b50611492565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a9059cbb9061143e903390859060040161188d565b602060405180830381600087803b15801561145857600080fd5b505af115801561146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149091906117f7565b505b5050565b826000815181106114b757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663095ea7b382856000815181106114ef57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016115229190611879565b60206040518083038186803b15801561153a57600080fd5b505afa15801561154e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611572919061181e565b6040518363ffffffff1660e01b815260040161158f92919061188d565b602060405180830381600087803b1580156115a957600080fd5b505af11580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e191906117f7565b506040517f5c11d7950000000000000000000000000000000000000000000000000000000081526001600160a01b03821690635c11d79590611630908590600090889030904290600401611942565b600060405180830381600087803b15801561164a57600080fd5b505af115801561165e573d6000803e3d6000fd5b50505050505050565b80356001600160a01b038116811461167e57600080fd5b919050565b600080600080600060a0868803121561169a578081fd5b6116a386611667565b94506116b160208701611667565b935060408601359250606086013591506116cd60808701611667565b90509295509295909350565b600080604083850312156116eb578182fd5b6116f483611667565b946020939093013593505050565b600080600060608486031215611716578283fd5b61171f84611667565b92506020840135915061173460408501611667565b90509250925092565b6000602080838503121561174f578182fd5b825167ffffffffffffffff80821115611766578384fd5b818501915085601f830112611779578384fd5b81518181111561178b5761178b611a08565b838102604051858282010181811085821117156117aa576117aa611a08565b604052828152858101935084860182860187018a10156117c8578788fd5b8795505b838610156117ea5780518552600195909501949386019386016117cc565b5098975050505050505050565b600060208284031215611808578081fd5b81518015158114611817578182fd5b9392505050565b60006020828403121561182f578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561186e5781516001600160a01b031687529582019590820190600101611849565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156118de578351835292840192918401916001016118c2565b50909695505050505050565b6020808252600c908201527f546f6f206d756368207461780000000000000000000000000000000000000000604082015260600190565b60008382526040602083015261193a6040830184611836565b949350505050565b600086825285602083015260a0604083015261196160a0830186611836565b6001600160a01b0394909416606083015250608001529392505050565b60008261199957634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119d6576119d66119f2565b500290565b6000828210156119ed576119ed6119f2565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122085fa87f3e8914f1046d8520c6a7181150d4e4b30113de4b3951733adda8f4bfb64736f6c63430008000033', 
        arguments: [
            routerAddr,
        ]
    }).send({
        from: user_wallet,
        gas: 3000000,
        gasPrice: web3.utils.toWei('5', 'gwei')
    }).on(
        'transactionHash',
        function(hash){
            term.green('Transaction hash: ' + hash + '');
        }
    ).on(
        'receipt',
        function(receipt){
            term.green("\nDeployment successful!\n\n");
            ani.stop();
        }
    ).on('confirmation', () => {}).then((newContractInstance) => {
        term.green('\n\nDeployed Contract Address : ', newContractInstance.options.address + '\n');
        //write userData.json and change TitanSmartContract to options.address
        term.bold.green("Editing userData.json and saving new address..." + '\n');
        fs.readFile('./userData.json' , (err, data) => {
            if(err){
                console.log(err);
            } else {
                let userData = JSON.parse(data);

                userData.TitanSmartContract = newContractInstance.options.address;
                userData = JSON.stringify(userData,null,2);  

                fs.writeFile('./userData.json', userData, (err) => {
                    if (err) throw err;
                    console.log('The file has been saved!' + '\n');
                    process.exit(0);
                });
            }
        });
    })           
}

async function sleep(ms){
    return new Promise(resolve=>{
        setTimeout(resolve,ms)
    })
}


async function Menu() {
    console.clear();
    let m =  chalkAnimation.rainbow("Loading Contract Data...");
    await init();   
    console.clear();
    m.stop();

    let amk = current == '0x0000000000000000000000000000000000000000' ? 'NO' : "YES";


    let balanceN = await web3.eth.getBalance(user_wallet);






    term.fullscreen();

    let k = figlet.textSync('Deployer Menu', {
        font: 'Standard',
        horizontalLayout: 'default',
        verticalLayout: 'default'
    });

    if(amk == 'NO'){
        term.bold.red('Titan Smart Contract Not Yet Deployed' + '\n\n');
    } else {
        term.bold.green('Titan Contract Is Already Deployed' + '\n\n');
    }


    term.bold.bold.green(k + '\n\n');

    term.green.bold.bold( 'Balance: '+ web3.utils.fromWei(balanceN, 'ether') + ' BNB\n');

    inquirer.prompt([
        {
            type: 'list',
            name: 'menu',
            message: 'What do you want to do?',
            choices: [
                'Deploy Titan Contract',
                'Exit'
            ]

        }]).then(answers => {
            switch (answers.menu) {
                case 'Deploy Titan Contract':
                    deploy();
                    break;
                case 'Exit':
                    process.exit();
                    break;
                default:
                    break;
            }
        });

}

Menu();